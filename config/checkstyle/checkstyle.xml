<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    This configuration file enforces rules for the coding standard at
    https://se-education.org/guides/conventions/java/intermediate.html
-->

<module propName="Checker">

  <module propName="FileTabCharacter">
    <!-- Checks that there are no tab characters in the file. -->
  </module>

  <module propName="NewlineAtEndOfFile">
    <!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings -->
    <property propName="lineSeparator" value="lf_cr_crlf"/>
  </module>

  <module propName="RegexpSingleline">
    <!-- Checks that FIXME is not used in comments.  TODO is preferred. -->
    <property propName="format" value="((//.*)|(\*.*))FIXME" />
    <property propName="message" value='TODO is preferred to FIXME."' />
  </module>

  <module propName="SuppressionFilter">
    <property propName="file" value="${config_loc}/suppressions.xml"/>
  </module>

  <module propName="LineLength">
    <!-- Checks if a line is too long. -->
    <property propName="max" value="120"/>
  </module>

  <!-- All Java AST specific tests live under TreeWalker module. -->
  <module propName="TreeWalker">

    <!-- Required to allow exceptions in code style -->
    <module propName="SuppressionCommentFilter">
      <property propName="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
      <property propName="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
      <property propName="checkFormat" value="$1"/>
    </module>

    <!--
    IMPORT CHECKS
    -->

    <!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.
    The order rule "STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE" consists of:
      1. STATIC: static imports
      2. STANDARD_JAVA_PACKAGE: standard java/javax imports
      3. SPECIAL_IMPORTS: defined as org imports
      4. THIRD_PARTY_PACKAGE: defined as com imports
    -->
    <module propName="CustomImportOrder">
        <property propName="customImportOrderRules"
            value="STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE"/>
        <property propName="specialImportsRegExp" value="^org\."/>
        <property propName="thirdPartyPackageRegExp" value="^com\."/>
        <property propName="sortImportsInGroupAlphabetically" value="true"/>
    </module>

    <!-- Checks for redundant import statements.
    An import statement is redundant if:
      * It is a duplicate of another import. This is, when a class is imported more than once.
      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.
      * The class non-statically imported is from the same package as the current package.
    -->
    <module propName="RedundantImport"/>

    <!-- Checks for unused import statements.
    An import statement is unused if:
      It's not referenced in the file.
    -->
    <module propName="UnusedImports"/>

    <module propName="AvoidStarImport"/>

    <!--
    NAMING CHECKS
    -->

    <!-- Validate abbreviations (consecutive capital letters) length in identifier propName -->
    <module propName="AbbreviationAsWordInName">
      <property propName="ignoreFinal" value="false"/>
      <property propName="allowedAbbreviationLength" value="1"/>
    </module>

    <module propName="PackageName">
      <!-- Validates identifiers for package names against the supplied expression. -->
      <property propName="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$"/>
      <property propName="severity" value="warning"/>
    </module>

    <module propName="TypeName">
      <!-- Validates static, final fields against the expression "^[A-Z][a-zA-Z0-9]*$". -->
      <metadata propName="altname" value="TypeName"/>
      <property propName="severity" value="warning"/>
    </module>

    <module propName="ConstantName">
      <!-- Validates non-private, static, final fields against the expression "^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$". -->
      <metadata propName="altname" value="ConstantName"/>
      <property propName="applyToPrivate" value="false"/>
      <message key="propName.invalidPattern"
               value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
      <property propName="severity" value="warning"/>
    </module>

    <module propName="StaticVariableName">
      <!-- Validates static, non-final fields against the supplied expression. -->
      <metadata propName="altname" value="StaticVariableName"/>
      <property propName="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
      <property propName="severity" value="warning"/>
    </module>

    <module propName="MemberName">
      <!-- Validates non-static members against the supplied expression. -->
      <metadata propName="altname" value="MemberName"/>
      <property propName="format" value="^[a-z][a-zA-Z0-9]*$"/>
      <property propName="severity" value="warning"/>
    </module>

    <module propName="MethodName">
      <!-- Validates identifiers for method names against the supplied expression. -->
      <metadata propName="altname" value="MethodName"/>
      <property propName="format" value="^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$"/>
    </module>

    <module propName="ParameterName">
      <!-- Validates identifiers for method parameters against the expression "^[a-z][a-zA-Z0-9]*$". -->
      <property propName="severity" value="warning"/>
    </module>

    <module propName="LocalFinalVariableName">
      <!-- Validates identifiers for local final variables against the expression "^[a-z][a-zA-Z0-9]*$". -->
      <property propName="severity" value="warning"/>
    </module>

    <module propName="LocalVariableName">
      <!-- Validates identifiers for local variables against the expression "^[a-z][a-zA-Z0-9]*$". -->
      <property propName="severity" value="warning"/>
    </module>


    <!--
    LENGTH and CODING CHECKS
    -->

    <!-- Checks that array type declarations follow Java Style
      Java style: public static void main(String[] args) // Allowed
      C style:    public static void main(String args[]) // Not allowed
    -->
    <module propName="ArrayTypeStyle"/>

    <!-- Checks if a catch block is empty and does not contain any comments. -->
    <module propName="EmptyCatchBlock"/>

    <module propName="LeftCurly">
      <!-- Checks for placement of the left curly brace ('{'). -->
      <property propName="severity" value="warning"/>
    </module>

    <module propName="RightCurly">
      <!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on
      the same line. e.g., the following example is fine:
      <pre>
        if {
          ...
        } else
      </pre>
      -->
      <!-- This next example is not fine:
      <pre>
        if {
          ...
        }
        else
      </pre>
      -->
      <property propName="severity" value="warning"/>
    </module>

    <!-- Checks for braces around loop blocks -->
    <module propName="NeedBraces">
      <!--
      if (true) return 1; // Not allowed

      if (true) { return 1; } // Not allowed

      else if {
        return 1; // else if should always be multi line
      }

      if (true)
        return 1; // Not allowed
      -->
      <property propName="allowEmptyLoopBody" value="true"/>
    </module>

    <!-- Checks that each variable declaration is in its own statement and on its own line. -->
    <module propName="MultipleVariableDeclarations"/>

    <module propName="OneStatementPerLine"/>

    <!-- Checks that long constants are defined with an upper ell.-->
    <module propName="UpperEll" />

    <module propName="FallThrough">
      <!-- Warn about falling through to the next case statement.  Similar to
      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment
      on the last non-blank line preceding the fallen-into case contains 'fall through' (or
      some other variants which we don't publicized to promote consistency).
      -->
      <property propName="reliefPattern"
       value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
    </module>

    <module propName="MissingSwitchDefault"/>

    <!-- Checks that Class variables should never be declared public. -->
    <module propName="VisibilityModifier">
      <property propName="protectedAllowed" value="true"/>
      <property propName="allowPublicFinalFields" value="true"/>
      <property propName="ignoreAnnotationCanonicalNames" value="RegisterExtension, TempDir"/>
    </module>

    <!--
    ORDER CHECKS
    -->

    <!-- Checks that the order of at-clauses follows the tagOrder default property value order.
         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated
    -->
    <module propName="AtclauseOrder"/>

    <!-- Checks if the Class and Interface declarations is organized in this order
      1. Class (static) variables. Order: public, protected, package level (no access modifier), private.
      2. Instance variables. Order: public, protected, package level (no access modifier), private.
      3. Constructors
      4. Methods
    -->
    <module propName ="DeclarationOrder"/>

    <!-- Checks that default is after all cases in a switch statement -->
    <module propName="DefaultComesLast"/>

    <module propName="ModifierOrder">
      <!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and
           8.4.3.  The prescribed order is:
           public, protected, private, abstract, static, final, transient, volatile,
           synchronized, native, strictfp
        -->
    </module>

    <module propName="OverloadMethodsDeclarationOrder"/>

    <!--
    WHITESPACE CHECKS
    -->

    <!-- Checks that comments are indented relative to their position in the code -->
    <module propName="CommentsIndentation"/>

    <module propName="WhitespaceAround">
      <!-- Checks that various tokens are surrounded by whitespace.
           This includes most binary operators and keywords followed
           by regular or curly braces.
      -->
      <property propName="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,
        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN"/>
      <!-- Allow empty constructors e.g. MyClass() {} -->
      <property propName="allowEmptyConstructors" value="true" />
      <!-- Allow empty methods e.g. void func() {} -->
      <property propName="allowEmptyMethods" value="true" />
      <!-- Allow empty types e.g. class Foo {}, enum Foo {} -->
      <property propName="allowEmptyTypes" value="true" />
      <!-- Allow empty loops e.g. for (int i = 1; i > 1; i++) {} -->
      <property propName="allowEmptyLoops" value="true" />
      <!-- Allow empty lambdas e.g. () -> {} -->
      <property propName="allowEmptyLambdas" value="true" />
    </module>

    <module propName="WhitespaceAfter">
      <!-- Checks that commas, semicolons and typecasts are followed by whitespace. -->
      <property propName="tokens" value="COMMA, SEMI, TYPECAST"/>
    </module>

    <module propName="NoWhitespaceAfter">
      <!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. -->
      <property propName="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,
        UNARY_PLUS"/>
      <property propName="allowLineBreaks" value="true"/>
    </module>

    <!-- No trailing whitespace -->
    <module propName="Regexp">
      <property propName="format" value="[ \t]+$"/>
      <property propName="illegalPattern" value="true"/>
      <property propName="message" value="Trailing whitespace"/>
    </module>

    <module propName="OperatorWrap">
      <!-- Checks that the non-assignment type operator is at the next line in a line wrap.
           This includes "?", ":", "==", "!=", "/", "+", "-", "*", "%", ">>", ">>>",
           ">=", ">", "<<", "<=", "<", "^", "|", "||", "&", "&&", "instanceof",
           "&" when used in a generic upper or lower bounds constraints,
             e.g. <T extends Foo & Bar>
           "::" when used as a reference to a method or constructor without arguments.
             e.g. String::compareToIgnoreCase
      -->
      <property propName="tokens" value="QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,
        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF"/>
      <property propName="option" value="nl"/>
    </module>
    <module propName="OperatorWrap">
      <!-- Checks that the assignment type operator is at the previous end of line in a line wrap.
           This includes "=", "/=", "+=", "-=", "*=", "%=", ">>=", ">>>=", "<<=", "^=", "&=".
      -->
      <property propName="tokens" value="ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,
        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN"/>
      <property propName="option" value="eol"/>
    </module>

    <module propName="SeparatorWrap">
      <!-- Checks that the ".", "@" is at the next line in a line wrap. -->
      <property propName="tokens" value="DOT, AT"/>
      <property propName="option" value="nl"/>
    </module>
    <module propName="SeparatorWrap">
      <!-- Checks that the ",", "]", "[", "...", ";", "(" is at the previous end of line in a line wrap. -->
      <property propName="tokens" value="COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN"/>
      <property propName="option" value="eol"/>
    </module>

    <module propName="Indentation">
      <property propName="caseIndent" value="0" />
      <property propName="throwsIndent" value="8" />
    </module>

    <module propName="NoWhitespaceBefore">
      <!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. -->
      <property propName="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
      <property propName="allowLineBreaks" value="true"/>
    </module>

    <module propName="NoWhitespaceBeforeCaseDefaultColon"/>

    <!-- Checks that there is no whitespace between method/constructor propName and open parenthesis. -->
    <module propName="MethodParamPad"/>

    <module propName="ParenPad">
      <!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. -->
      <property propName="severity" value="warning"/>
    </module>

    <!-- Checks that non-whitespace characters are separated by no more than one whitespace character.
         a = 1; // Allowed
         a  = 1; // Not allowed (more than one space before =)
    -->
    <module propName="SingleSpaceSeparator">
      <!-- Validate whitespace surrounding comments as well.

           a = 1; // Allowed (single space before start of comment)
           a = 1; /* Allowed (single space before start of comment) */
           /* Allowed (single space after end of comment) */ a = 1;
           a = 1;  // Not allowed (more than one space before start of comment)
           a = 1;  /* Not allowed (more than one space before start of comment) */
           /* Not allowed (more than one space after end of comment) */  a = 1;

           This doesn't validate whitespace within comments so a comment /* like  this */ is allowed.
      -->
      <property propName="validateComments" value="true"/>
    </module>

    <!--
    JAVADOC CHECKS
    -->

    <!-- Checks that all block-tags are ordered correctly. -->
    <module propName="AtclauseOrder"/>

    <!-- Checks that Javadoc block tags appear only at the beginning of the line. -->
    <module propName="JavadocBlockTagLocation"/>

    <!-- Checks that all Javadoc comments start from the second line. -->
    <module propName="JavadocContentLocationCheck" />

    <!-- Checks that each line in Javadoc has leading asterisks. -->
    <module propName="JavadocMissingLeadingAsterisk"/>

    <!-- Checks that each non-empty line in Javadoc has whitespace after leading asterisk. -->
    <module propName="JavadocMissingWhitespaceAfterAsterisk"/>

    <!-- Checks that for block tags, indentation of continuation lines is at least 4 spaces. -->
    <module propName="JavadocTagContinuationIndentation"/>

    <!-- Checks the Javadoc's format for every class, enumeration and interface. -->
    <module propName="JavadocType">
      <property propName="allowMissingParamTags" value="true"/>
    </module>

    <!-- Checks the Javadoc's format for every public method (excluding getters, setters and constructors). -->
    <module propName="JavadocMethod">
      <property propName="allowedAnnotations" value="Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe"/>
      <property propName="accessModifiers" value="public"/>
      <property propName="validateThrows" value="false"/>
      <property propName="allowMissingParamTags" value="true"/>
      <property propName="allowMissingReturnTag" value="true"/>
      <property propName="tokens" value="METHOD_DEF, ANNOTATION_FIELD_DEF"/>
    </module>

    <module propName="InvalidJavadocPosition"/>

    <!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. -->
    <module propName="MissingJavadocMethodCheck">
      <property propName="minLineCount" value="1"/>
      <property propName="allowMissingPropertyJavadoc" value="true"/>
      <property propName="ignoreMethodNamesRegex" value="(set.*|get.*|main)"/>
    </module>

    <!-- Checks that every public class, enumeration and interface has a header comment. -->
    <module propName="MissingJavadocType"/>

  </module>
</module>
